# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from . import spanAgent_pb2 as agent_dot_spanAgent__pb2
from .. import span_pb2 as span__pb2


class SpanAgentStub(object):
  """service interface to push spans to haystack agent
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.dispatch = channel.unary_unary(
        '/SpanAgent/dispatch',
        request_serializer=span__pb2.Span.SerializeToString,
        response_deserializer=agent_dot_spanAgent__pb2.DispatchResult.FromString,
        )


class SpanAgentServicer(object):
  """service interface to push spans to haystack agent
  """

  def dispatch(self, request, context):
    """dispatch span to haystack agent
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_SpanAgentServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'dispatch': grpc.unary_unary_rpc_method_handler(
          servicer.dispatch,
          request_deserializer=span__pb2.Span.FromString,
          response_serializer=agent_dot_spanAgent__pb2.DispatchResult.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'SpanAgent', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
